generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// 性別の選択肢: male、female
enum Genders {
  male
  female
}

/// ユーザーモデル: 認証に使用される基本情報を格納
model Users {
  /// ユーザーの一意なID (UUID)
  id        String   @id @default(uuid())

  /// ユーザーのメールアドレス。必ず一意である必要がある。
  email     String   @unique

  /// ユーザーが作成された日時。デフォルトで現在のタイムスタンプが使用される。
  createdAt DateTime @default(now()) @map("created_at")

  /// ユーザー情報が最後に更新された日時。自動で更新される。
  updatedAt DateTime @updatedAt @map("updated_at")

  /// プロフィール情報。各ユーザーに1つのプロフィールが紐づく。
  profile   Profiles?
}

/// プロフィールモデル: ユーザーの追加情報を格納
model Profiles {
  /// プロフィールの一意なID (UUID)
  id               String   @id @default(uuid())

  /// ユーザーのアバター画像のURL。オプションフィールド。
  avatarImageUrl   String?  @map("avatar_image_url")

  /// ユーザーの表示名。255文字までの入力が可能。
  profileName      String   @map("profile_name")

  /// 性別の選択肢 (male, female) Enumを使用。
  gender           Genders   @map("gender")

  /// 学習カテゴリ。任意のフィールドで255文字まで。
  learningCategory String?  @map("learning_category")

  /// 自己紹介テキスト。任意のフィールド。
  selfIntroduction String?  @map("self_introduction")

  /// プライバシー設定。デフォルトはfalse（公開）。
  isPrivate        Boolean  @default(false) @map("is_private")

  /// プロフィール作成日時。デフォルトで現在のタイムスタンプが使用される。
  createdAt        DateTime @default(now()) @map("created_at")

  /// プロフィールが最後に更新された日時。自動で更新される。
  updatedAt        DateTime @updatedAt @map("updated_at")

  /// このプロフィールが属するユーザーのID。auth.usersとの一意な関連。
  userId           String   @unique @map("user_id")

  /// Usersモデルとのリレーション。userIdで関連付けられている。
  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)
}
